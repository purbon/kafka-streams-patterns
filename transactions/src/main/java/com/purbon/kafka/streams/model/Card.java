/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.purbon.kafka.streams.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Card extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2463462436369581726L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Card\",\"namespace\":\"com.purbon.kafka.streams.model\",\"fields\":[{\"name\":\"card_id\",\"type\":\"long\"},{\"name\":\"owner\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"string\"},{\"name\":\"token\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Card> ENCODER =
      new BinaryMessageEncoder<Card>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Card> DECODER =
      new BinaryMessageDecoder<Card>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Card> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Card> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Card>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Card to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Card from a ByteBuffer. */
  public static Card fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long card_id;
  @Deprecated public java.lang.CharSequence owner;
  @Deprecated public java.lang.CharSequence code;
  @Deprecated public int token;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Card() {}

  /**
   * All-args constructor.
   * @param card_id The new value for card_id
   * @param owner The new value for owner
   * @param code The new value for code
   * @param token The new value for token
   */
  public Card(java.lang.Long card_id, java.lang.CharSequence owner, java.lang.CharSequence code, java.lang.Integer token) {
    this.card_id = card_id;
    this.owner = owner;
    this.code = code;
    this.token = token;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return card_id;
    case 1: return owner;
    case 2: return code;
    case 3: return token;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: card_id = (java.lang.Long)value$; break;
    case 1: owner = (java.lang.CharSequence)value$; break;
    case 2: code = (java.lang.CharSequence)value$; break;
    case 3: token = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'card_id' field.
   * @return The value of the 'card_id' field.
   */
  public java.lang.Long getCardId() {
    return card_id;
  }

  /**
   * Sets the value of the 'card_id' field.
   * @param value the value to set.
   */
  public void setCardId(java.lang.Long value) {
    this.card_id = value;
  }

  /**
   * Gets the value of the 'owner' field.
   * @return The value of the 'owner' field.
   */
  public java.lang.CharSequence getOwner() {
    return owner;
  }

  /**
   * Sets the value of the 'owner' field.
   * @param value the value to set.
   */
  public void setOwner(java.lang.CharSequence value) {
    this.owner = value;
  }

  /**
   * Gets the value of the 'code' field.
   * @return The value of the 'code' field.
   */
  public java.lang.CharSequence getCode() {
    return code;
  }

  /**
   * Sets the value of the 'code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.code = value;
  }

  /**
   * Gets the value of the 'token' field.
   * @return The value of the 'token' field.
   */
  public java.lang.Integer getToken() {
    return token;
  }

  /**
   * Sets the value of the 'token' field.
   * @param value the value to set.
   */
  public void setToken(java.lang.Integer value) {
    this.token = value;
  }

  /**
   * Creates a new Card RecordBuilder.
   * @return A new Card RecordBuilder
   */
  public static com.purbon.kafka.streams.model.Card.Builder newBuilder() {
    return new com.purbon.kafka.streams.model.Card.Builder();
  }

  /**
   * Creates a new Card RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Card RecordBuilder
   */
  public static com.purbon.kafka.streams.model.Card.Builder newBuilder(com.purbon.kafka.streams.model.Card.Builder other) {
    return new com.purbon.kafka.streams.model.Card.Builder(other);
  }

  /**
   * Creates a new Card RecordBuilder by copying an existing Card instance.
   * @param other The existing instance to copy.
   * @return A new Card RecordBuilder
   */
  public static com.purbon.kafka.streams.model.Card.Builder newBuilder(com.purbon.kafka.streams.model.Card other) {
    return new com.purbon.kafka.streams.model.Card.Builder(other);
  }

  /**
   * RecordBuilder for Card instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Card>
    implements org.apache.avro.data.RecordBuilder<Card> {

    private long card_id;
    private java.lang.CharSequence owner;
    private java.lang.CharSequence code;
    private int token;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.purbon.kafka.streams.model.Card.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.card_id)) {
        this.card_id = data().deepCopy(fields()[0].schema(), other.card_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.owner)) {
        this.owner = data().deepCopy(fields()[1].schema(), other.owner);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.code)) {
        this.code = data().deepCopy(fields()[2].schema(), other.code);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.token)) {
        this.token = data().deepCopy(fields()[3].schema(), other.token);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Card instance
     * @param other The existing instance to copy.
     */
    private Builder(com.purbon.kafka.streams.model.Card other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.card_id)) {
        this.card_id = data().deepCopy(fields()[0].schema(), other.card_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.owner)) {
        this.owner = data().deepCopy(fields()[1].schema(), other.owner);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.code)) {
        this.code = data().deepCopy(fields()[2].schema(), other.code);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.token)) {
        this.token = data().deepCopy(fields()[3].schema(), other.token);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'card_id' field.
      * @return The value.
      */
    public java.lang.Long getCardId() {
      return card_id;
    }

    /**
      * Sets the value of the 'card_id' field.
      * @param value The value of 'card_id'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Card.Builder setCardId(long value) {
      validate(fields()[0], value);
      this.card_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'card_id' field has been set.
      * @return True if the 'card_id' field has been set, false otherwise.
      */
    public boolean hasCardId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'card_id' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Card.Builder clearCardId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'owner' field.
      * @return The value.
      */
    public java.lang.CharSequence getOwner() {
      return owner;
    }

    /**
      * Sets the value of the 'owner' field.
      * @param value The value of 'owner'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Card.Builder setOwner(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.owner = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'owner' field has been set.
      * @return True if the 'owner' field has been set, false otherwise.
      */
    public boolean hasOwner() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'owner' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Card.Builder clearOwner() {
      owner = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return code;
    }

    /**
      * Sets the value of the 'code' field.
      * @param value The value of 'code'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Card.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.code = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'code' field has been set.
      * @return True if the 'code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'code' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Card.Builder clearCode() {
      code = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'token' field.
      * @return The value.
      */
    public java.lang.Integer getToken() {
      return token;
    }

    /**
      * Sets the value of the 'token' field.
      * @param value The value of 'token'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Card.Builder setToken(int value) {
      validate(fields()[3], value);
      this.token = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'token' field has been set.
      * @return True if the 'token' field has been set, false otherwise.
      */
    public boolean hasToken() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'token' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Card.Builder clearToken() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Card build() {
      try {
        Card record = new Card();
        record.card_id = fieldSetFlags()[0] ? this.card_id : (java.lang.Long) defaultValue(fields()[0]);
        record.owner = fieldSetFlags()[1] ? this.owner : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.code = fieldSetFlags()[2] ? this.code : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.token = fieldSetFlags()[3] ? this.token : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Card>
    WRITER$ = (org.apache.avro.io.DatumWriter<Card>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Card>
    READER$ = (org.apache.avro.io.DatumReader<Card>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
