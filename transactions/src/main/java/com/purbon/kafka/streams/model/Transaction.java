/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.purbon.kafka.streams.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Transaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8958780521951526420L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transaction\",\"namespace\":\"com.purbon.kafka.streams.model\",\"fields\":[{\"name\":\"transaction_id\",\"type\":\"long\"},{\"name\":\"card_id\",\"type\":\"long\"},{\"name\":\"user_id\",\"type\":\"string\"},{\"name\":\"purchase_id\",\"type\":\"long\"},{\"name\":\"store_id\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Transaction> ENCODER =
      new BinaryMessageEncoder<Transaction>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Transaction> DECODER =
      new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Transaction> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Transaction> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Transaction>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Transaction to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Transaction from a ByteBuffer. */
  public static Transaction fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long transaction_id;
  @Deprecated public long card_id;
  @Deprecated public java.lang.CharSequence user_id;
  @Deprecated public long purchase_id;
  @Deprecated public int store_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Transaction() {}

  /**
   * All-args constructor.
   * @param transaction_id The new value for transaction_id
   * @param card_id The new value for card_id
   * @param user_id The new value for user_id
   * @param purchase_id The new value for purchase_id
   * @param store_id The new value for store_id
   */
  public Transaction(java.lang.Long transaction_id, java.lang.Long card_id, java.lang.CharSequence user_id, java.lang.Long purchase_id, java.lang.Integer store_id) {
    this.transaction_id = transaction_id;
    this.card_id = card_id;
    this.user_id = user_id;
    this.purchase_id = purchase_id;
    this.store_id = store_id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transaction_id;
    case 1: return card_id;
    case 2: return user_id;
    case 3: return purchase_id;
    case 4: return store_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transaction_id = (java.lang.Long)value$; break;
    case 1: card_id = (java.lang.Long)value$; break;
    case 2: user_id = (java.lang.CharSequence)value$; break;
    case 3: purchase_id = (java.lang.Long)value$; break;
    case 4: store_id = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transaction_id' field.
   * @return The value of the 'transaction_id' field.
   */
  public java.lang.Long getTransactionId() {
    return transaction_id;
  }

  /**
   * Sets the value of the 'transaction_id' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.Long value) {
    this.transaction_id = value;
  }

  /**
   * Gets the value of the 'card_id' field.
   * @return The value of the 'card_id' field.
   */
  public java.lang.Long getCardId() {
    return card_id;
  }

  /**
   * Sets the value of the 'card_id' field.
   * @param value the value to set.
   */
  public void setCardId(java.lang.Long value) {
    this.card_id = value;
  }

  /**
   * Gets the value of the 'user_id' field.
   * @return The value of the 'user_id' field.
   */
  public java.lang.CharSequence getUserId() {
    return user_id;
  }

  /**
   * Sets the value of the 'user_id' field.
   * @param value the value to set.
   */
  public void setUserId(java.lang.CharSequence value) {
    this.user_id = value;
  }

  /**
   * Gets the value of the 'purchase_id' field.
   * @return The value of the 'purchase_id' field.
   */
  public java.lang.Long getPurchaseId() {
    return purchase_id;
  }

  /**
   * Sets the value of the 'purchase_id' field.
   * @param value the value to set.
   */
  public void setPurchaseId(java.lang.Long value) {
    this.purchase_id = value;
  }

  /**
   * Gets the value of the 'store_id' field.
   * @return The value of the 'store_id' field.
   */
  public java.lang.Integer getStoreId() {
    return store_id;
  }

  /**
   * Sets the value of the 'store_id' field.
   * @param value the value to set.
   */
  public void setStoreId(java.lang.Integer value) {
    this.store_id = value;
  }

  /**
   * Creates a new Transaction RecordBuilder.
   * @return A new Transaction RecordBuilder
   */
  public static com.purbon.kafka.streams.model.Transaction.Builder newBuilder() {
    return new com.purbon.kafka.streams.model.Transaction.Builder();
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Transaction RecordBuilder
   */
  public static com.purbon.kafka.streams.model.Transaction.Builder newBuilder(com.purbon.kafka.streams.model.Transaction.Builder other) {
    return new com.purbon.kafka.streams.model.Transaction.Builder(other);
  }

  /**
   * Creates a new Transaction RecordBuilder by copying an existing Transaction instance.
   * @param other The existing instance to copy.
   * @return A new Transaction RecordBuilder
   */
  public static com.purbon.kafka.streams.model.Transaction.Builder newBuilder(com.purbon.kafka.streams.model.Transaction other) {
    return new com.purbon.kafka.streams.model.Transaction.Builder(other);
  }

  /**
   * RecordBuilder for Transaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transaction>
    implements org.apache.avro.data.RecordBuilder<Transaction> {

    private long transaction_id;
    private long card_id;
    private java.lang.CharSequence user_id;
    private long purchase_id;
    private int store_id;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.purbon.kafka.streams.model.Transaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.card_id)) {
        this.card_id = data().deepCopy(fields()[1].schema(), other.card_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_id)) {
        this.user_id = data().deepCopy(fields()[2].schema(), other.user_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.purchase_id)) {
        this.purchase_id = data().deepCopy(fields()[3].schema(), other.purchase_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.store_id)) {
        this.store_id = data().deepCopy(fields()[4].schema(), other.store_id);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Transaction instance
     * @param other The existing instance to copy.
     */
    private Builder(com.purbon.kafka.streams.model.Transaction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.card_id)) {
        this.card_id = data().deepCopy(fields()[1].schema(), other.card_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.user_id)) {
        this.user_id = data().deepCopy(fields()[2].schema(), other.user_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.purchase_id)) {
        this.purchase_id = data().deepCopy(fields()[3].schema(), other.purchase_id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.store_id)) {
        this.store_id = data().deepCopy(fields()[4].schema(), other.store_id);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'transaction_id' field.
      * @return The value.
      */
    public java.lang.Long getTransactionId() {
      return transaction_id;
    }

    /**
      * Sets the value of the 'transaction_id' field.
      * @param value The value of 'transaction_id'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder setTransactionId(long value) {
      validate(fields()[0], value);
      this.transaction_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_id' field has been set.
      * @return True if the 'transaction_id' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transaction_id' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder clearTransactionId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'card_id' field.
      * @return The value.
      */
    public java.lang.Long getCardId() {
      return card_id;
    }

    /**
      * Sets the value of the 'card_id' field.
      * @param value The value of 'card_id'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder setCardId(long value) {
      validate(fields()[1], value);
      this.card_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'card_id' field has been set.
      * @return True if the 'card_id' field has been set, false otherwise.
      */
    public boolean hasCardId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'card_id' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder clearCardId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getUserId() {
      return user_id;
    }

    /**
      * Sets the value of the 'user_id' field.
      * @param value The value of 'user_id'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder setUserId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.user_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'user_id' field has been set.
      * @return True if the 'user_id' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'user_id' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder clearUserId() {
      user_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'purchase_id' field.
      * @return The value.
      */
    public java.lang.Long getPurchaseId() {
      return purchase_id;
    }

    /**
      * Sets the value of the 'purchase_id' field.
      * @param value The value of 'purchase_id'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder setPurchaseId(long value) {
      validate(fields()[3], value);
      this.purchase_id = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'purchase_id' field has been set.
      * @return True if the 'purchase_id' field has been set, false otherwise.
      */
    public boolean hasPurchaseId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'purchase_id' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder clearPurchaseId() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'store_id' field.
      * @return The value.
      */
    public java.lang.Integer getStoreId() {
      return store_id;
    }

    /**
      * Sets the value of the 'store_id' field.
      * @param value The value of 'store_id'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder setStoreId(int value) {
      validate(fields()[4], value);
      this.store_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'store_id' field has been set.
      * @return True if the 'store_id' field has been set, false otherwise.
      */
    public boolean hasStoreId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'store_id' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.Transaction.Builder clearStoreId() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Transaction build() {
      try {
        Transaction record = new Transaction();
        record.transaction_id = fieldSetFlags()[0] ? this.transaction_id : (java.lang.Long) defaultValue(fields()[0]);
        record.card_id = fieldSetFlags()[1] ? this.card_id : (java.lang.Long) defaultValue(fields()[1]);
        record.user_id = fieldSetFlags()[2] ? this.user_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.purchase_id = fieldSetFlags()[3] ? this.purchase_id : (java.lang.Long) defaultValue(fields()[3]);
        record.store_id = fieldSetFlags()[4] ? this.store_id : (java.lang.Integer) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Transaction>
    WRITER$ = (org.apache.avro.io.DatumWriter<Transaction>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Transaction>
    READER$ = (org.apache.avro.io.DatumReader<Transaction>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
