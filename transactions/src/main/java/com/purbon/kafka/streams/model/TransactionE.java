/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.purbon.kafka.streams.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TransactionE extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6599925163972179395L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TransactionE\",\"namespace\":\"com.purbon.kafka.streams.model\",\"fields\":[{\"name\":\"transaction_id\",\"type\":\"long\"},{\"name\":\"card_owner\",\"type\":\"string\"},{\"name\":\"store_name\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TransactionE> ENCODER =
      new BinaryMessageEncoder<TransactionE>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TransactionE> DECODER =
      new BinaryMessageDecoder<TransactionE>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TransactionE> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TransactionE> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TransactionE>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TransactionE to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TransactionE from a ByteBuffer. */
  public static TransactionE fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long transaction_id;
  @Deprecated public java.lang.CharSequence card_owner;
  @Deprecated public java.lang.CharSequence store_name;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TransactionE() {}

  /**
   * All-args constructor.
   * @param transaction_id The new value for transaction_id
   * @param card_owner The new value for card_owner
   * @param store_name The new value for store_name
   */
  public TransactionE(java.lang.Long transaction_id, java.lang.CharSequence card_owner, java.lang.CharSequence store_name) {
    this.transaction_id = transaction_id;
    this.card_owner = card_owner;
    this.store_name = store_name;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return transaction_id;
    case 1: return card_owner;
    case 2: return store_name;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: transaction_id = (java.lang.Long)value$; break;
    case 1: card_owner = (java.lang.CharSequence)value$; break;
    case 2: store_name = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'transaction_id' field.
   * @return The value of the 'transaction_id' field.
   */
  public java.lang.Long getTransactionId() {
    return transaction_id;
  }

  /**
   * Sets the value of the 'transaction_id' field.
   * @param value the value to set.
   */
  public void setTransactionId(java.lang.Long value) {
    this.transaction_id = value;
  }

  /**
   * Gets the value of the 'card_owner' field.
   * @return The value of the 'card_owner' field.
   */
  public java.lang.CharSequence getCardOwner() {
    return card_owner;
  }

  /**
   * Sets the value of the 'card_owner' field.
   * @param value the value to set.
   */
  public void setCardOwner(java.lang.CharSequence value) {
    this.card_owner = value;
  }

  /**
   * Gets the value of the 'store_name' field.
   * @return The value of the 'store_name' field.
   */
  public java.lang.CharSequence getStoreName() {
    return store_name;
  }

  /**
   * Sets the value of the 'store_name' field.
   * @param value the value to set.
   */
  public void setStoreName(java.lang.CharSequence value) {
    this.store_name = value;
  }

  /**
   * Creates a new TransactionE RecordBuilder.
   * @return A new TransactionE RecordBuilder
   */
  public static com.purbon.kafka.streams.model.TransactionE.Builder newBuilder() {
    return new com.purbon.kafka.streams.model.TransactionE.Builder();
  }

  /**
   * Creates a new TransactionE RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TransactionE RecordBuilder
   */
  public static com.purbon.kafka.streams.model.TransactionE.Builder newBuilder(com.purbon.kafka.streams.model.TransactionE.Builder other) {
    return new com.purbon.kafka.streams.model.TransactionE.Builder(other);
  }

  /**
   * Creates a new TransactionE RecordBuilder by copying an existing TransactionE instance.
   * @param other The existing instance to copy.
   * @return A new TransactionE RecordBuilder
   */
  public static com.purbon.kafka.streams.model.TransactionE.Builder newBuilder(com.purbon.kafka.streams.model.TransactionE other) {
    return new com.purbon.kafka.streams.model.TransactionE.Builder(other);
  }

  /**
   * RecordBuilder for TransactionE instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TransactionE>
    implements org.apache.avro.data.RecordBuilder<TransactionE> {

    private long transaction_id;
    private java.lang.CharSequence card_owner;
    private java.lang.CharSequence store_name;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.purbon.kafka.streams.model.TransactionE.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.card_owner)) {
        this.card_owner = data().deepCopy(fields()[1].schema(), other.card_owner);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.store_name)) {
        this.store_name = data().deepCopy(fields()[2].schema(), other.store_name);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TransactionE instance
     * @param other The existing instance to copy.
     */
    private Builder(com.purbon.kafka.streams.model.TransactionE other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.transaction_id)) {
        this.transaction_id = data().deepCopy(fields()[0].schema(), other.transaction_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.card_owner)) {
        this.card_owner = data().deepCopy(fields()[1].schema(), other.card_owner);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.store_name)) {
        this.store_name = data().deepCopy(fields()[2].schema(), other.store_name);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'transaction_id' field.
      * @return The value.
      */
    public java.lang.Long getTransactionId() {
      return transaction_id;
    }

    /**
      * Sets the value of the 'transaction_id' field.
      * @param value The value of 'transaction_id'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.TransactionE.Builder setTransactionId(long value) {
      validate(fields()[0], value);
      this.transaction_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'transaction_id' field has been set.
      * @return True if the 'transaction_id' field has been set, false otherwise.
      */
    public boolean hasTransactionId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'transaction_id' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.TransactionE.Builder clearTransactionId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'card_owner' field.
      * @return The value.
      */
    public java.lang.CharSequence getCardOwner() {
      return card_owner;
    }

    /**
      * Sets the value of the 'card_owner' field.
      * @param value The value of 'card_owner'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.TransactionE.Builder setCardOwner(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.card_owner = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'card_owner' field has been set.
      * @return True if the 'card_owner' field has been set, false otherwise.
      */
    public boolean hasCardOwner() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'card_owner' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.TransactionE.Builder clearCardOwner() {
      card_owner = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'store_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getStoreName() {
      return store_name;
    }

    /**
      * Sets the value of the 'store_name' field.
      * @param value The value of 'store_name'.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.TransactionE.Builder setStoreName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.store_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'store_name' field has been set.
      * @return True if the 'store_name' field has been set, false otherwise.
      */
    public boolean hasStoreName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'store_name' field.
      * @return This builder.
      */
    public com.purbon.kafka.streams.model.TransactionE.Builder clearStoreName() {
      store_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TransactionE build() {
      try {
        TransactionE record = new TransactionE();
        record.transaction_id = fieldSetFlags()[0] ? this.transaction_id : (java.lang.Long) defaultValue(fields()[0]);
        record.card_owner = fieldSetFlags()[1] ? this.card_owner : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.store_name = fieldSetFlags()[2] ? this.store_name : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TransactionE>
    WRITER$ = (org.apache.avro.io.DatumWriter<TransactionE>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TransactionE>
    READER$ = (org.apache.avro.io.DatumReader<TransactionE>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
